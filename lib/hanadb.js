'use strict';

var https = require("https");

function DB(options){
    this.sDbName = options.name;
    this._oConnection = null;
};

DB.prototype.connect = function(){
    this._oConnection = MySQL.createConnection({
        host: "localhost",
        user: "guest",
        password: "guest",
        database: this.sDbName,
        port: "3306"
    });
    this._oConnection.connect();
};



/**
  Insert a new record when it does not exist in the DB. Or update it depends on the input 'bUpdate' flag
    bUpdate(boolean): Update the item or not when there is already
    oParam(object): {
        table(string): DB table name
        values(array): field names which act as returned fields of SQL SELECT statement
        keys(object): key-value pairs which appear in WHERE clause as select criteria. If value of key cannot be determined before SELECT,
                      such as auto_increment field, value must be provided as 'undefined' in the parameter
        specialCondition(string): special select criteria which cannot be provided as key-value mode, such as 'timestamp LIKE '20180601%''
        fnCallback(function): DB query callback function
    }
*/
DB.prototype.insertNewUpdateExistDBItem = function(bUpdate, oParam){
    this.selectDBItem({
        table: oParam.table,
        values: Object.keys(oParam.keys),
        keys: JSON.parse(JSON.stringify(oParam.keys)), //Remove object field whose value is undefined
        specialCondition: oParam.specialCondition,
        fnCallback: function(oError, aRow){
            if(oError){
                console.log("Check " + oParam.table + " (" + JSON.stringify(oParam.keys) + ") existence failed. Message: " + oError.message);
                return;
            }
            
            if(aRow.length === 0){
                //console.log("Create a new " + oParam.table + " " + JSON.stringify(Object.assign({}, oParam.keys, oParam.values)));

                this.insertDBItem({
                    table: oParam.table,
                    values: JSON.parse(JSON.stringify(Object.assign({}, oParam.keys, oParam.values))) //Remove object field whose value is undefined. These fields are auto_increment which are generated by DB when do INSERT
                });
            }else if(bUpdate){
                //console.log("Update an existing " + oParam.table + ", keys: " + JSON.stringify(oParam.keys) + ", values: " + JSON.stringify(oParam.values));

                this.updateDBItem({
                    table: oParam.table,
                    keys: Object.assign(oParam.keys, aRow[0]), //Backfill key fields' values since auto_increment field is given as undefined in the parameter
                    values: oParam.values
                });
            }else{
                console.log(oParam.table + " with keys: " + JSON.stringify(oParam.keys) + " exist yet.");
            }
        }.bind(this)
    });
};

module.exports = DB;